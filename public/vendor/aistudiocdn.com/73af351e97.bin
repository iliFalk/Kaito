<!DOCTYPE html>
<html lang="en">

<head>
  <meta charSet="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">

<title>ESM&gt;CDN</title>
<meta name="description" content="A fast, smart & global CDN for modern(es2015+) web development." />
<meta name="keywords" content="js,javascript,typescript,modern,web,dev,development,esm,es2015,es6,deno,npm,github,global,cdn,infrastructure,esbuild" />
<meta name="twitter:title" content="ESM>CDN" />
<meta name="twitter:description" content="A fast, smart & global CDN for modern(es2015+) web development." />
<meta name="twitter:image" content="https://esm.sh/og-image.png" />
<meta name="twitter:card" content="summary_large_image" />
<meta property="og:title" content="ESM>CDN" />
<meta property="og:description" content="A fast, smart & global CDN for modern(es2015+) web development." />
<meta property="og:image" content="https://esm.sh/og-image.png" />
<meta property="og:url" content="https://esm.sh" />
<link rel="icon" href="/favicon.svg"><link rel="stylesheet" href="/app.css?v=48"><script id="ssr-data" type="application/json">{"requestSum":{"jsRequests":3215599290,"range":"20250820-20250919","cacheHit":true}}</script></head>

<body>
  <div id="root">
    <header class="app-header"><div class="wrapper"><h1><a href="/"><svg width="16" height="16" viewBox="0 0 16 16" class="icon" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M11.4286 2.3158H5.74576C3.41404 2.3158 1.52381 4.0124 1.52381 6.10527C1.52381 8.19814 3.41404 9.89474 5.74576 9.89474H10.6667" stroke="currentColor" stroke-width="1.8" stroke-linecap="round"></path><path d="M5.33334 6.10526H10.2542C12.586 6.10526 14.4762 7.80187 14.4762 9.89474C14.4762 11.9876 12.586 13.6842 10.2542 13.6842H4.84034" stroke="currentColor" stroke-width="1.8" stroke-linecap="round"></path></svg></a></h1><nav><a href="#docs" class="">Docs</a><a href="#tsx" class="">TSX</a><a href="#faq" class="">FAQ</a><button class="button">Playground</button><a class="icon-link" href="https://github.com/esm-dev/esm.sh" title="Github"><svg width="24" height="24" viewBox="0 0 24 24" class="icon" fill="none" xmlns="http://www.w3.org/2000/svg"><title>Github</title><path fill-rule="evenodd" clip-rule="evenodd" d="M12 0C5.37 0 0 5.37 0 12C0 17.31 3.435 21.795 8.205 23.385C8.805 23.49 9.03 23.13 9.03 22.815C9.03 22.53 9.015 21.585 9.015 20.58C6 21.135 5.22 19.845 4.98 19.17C4.845 18.825 4.26 17.76 3.75 17.475C3.33 17.25 2.73 16.695 3.735 16.68C4.68 16.665 5.355 17.55 5.58 17.91C6.66 19.725 8.385 19.215 9.075 18.9C9.18 18.12 9.495 17.595 9.84 17.295C7.17 16.995 4.38 15.96 4.38 11.37C4.38 10.065 4.845 8.985 5.61 8.145C5.49 7.845 5.07 6.615 5.73 4.965C5.73 4.965 6.735 4.65 9.03 6.195C9.99 5.925 11.01 5.79 12.03 5.79C13.05 5.79 14.07 5.925 15.03 6.195C17.325 4.635 18.33 4.965 18.33 4.965C18.99 6.615 18.57 7.845 18.45 8.145C19.215 8.985 19.68 10.05 19.68 11.37C19.68 15.975 16.875 16.995 14.205 17.295C14.64 17.67 15.015 18.39 15.015 19.515C15.015 21.12 15 22.41 15 22.815C15 23.13 15.225 23.505 15.825 23.385C18.2072 22.5808 20.2773 21.0498 21.7438 19.0074C23.2103 16.9651 23.9994 14.5143 24 12C24 5.37 18.63 0 12 0Z" fill="currentColor"></path></svg></a></nav></div></header><section id="hero"><h2><strong>Fast</strong><br/><strong>Smart</strong><br/><strong>Global</strong><br/><strong><em>ESM<!-- -->&gt;</em>CDN</strong></h2></section><section id="summary"><div class="wrapper"><div class="summary-card"><div class="card"><svg width="16" height="16" viewBox="0 0 16 16" class="icon" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M0 5.25143C0 4.3552 0.356318 3.58403 1.06897 2.93791C1.75863 2.31263 2.62069 2 3.65517 2C4.71265 2 5.5862 2.31263 6.27586 2.93791L7.34483 3.87582C7.41379 3.93835 7.41379 4.00088 7.34483 4.06341L6.65517 4.65742C6.58621 4.71994 6.52874 4.71994 6.48276 4.65742L5.41379 3.7195C4.90804 3.30265 4.32184 3.09423 3.65517 3.09423C3.01149 3.09423 2.43678 3.30265 1.93104 3.7195C1.47126 4.13636 1.24138 4.64699 1.24138 5.25143C1.24138 5.85586 1.47126 6.3665 1.93104 6.78335C2.43678 7.2002 3.01149 7.40862 3.65517 7.40862C4.32184 7.40862 4.90804 7.2002 5.41379 6.78335L9.72414 2.93791C10.4138 2.31263 11.2874 2 12.3448 2C13.3793 2 14.2414 2.31263 14.931 2.93791C15.6437 3.58403 16 4.3552 16 5.25143C16 6.14766 15.6437 6.91882 14.931 7.56494C14.7464 7.73238 14.5493 7.8774 14.3399 8C14.5493 8.1226 14.7464 8.26762 14.931 8.43506C15.6437 9.08118 16 9.85234 16 10.7486C16 11.6448 15.6437 12.416 14.931 13.0621C14.2414 13.6874 13.3793 14 12.3448 14C11.2874 14 10.4138 13.6874 9.72414 13.0621L8.65517 12.1242C8.58621 12.0616 8.58621 11.9991 8.65517 11.9366L9.34483 11.3426C9.41379 11.2801 9.47126 11.2801 9.51724 11.3426L10.5862 12.2805C11.092 12.6973 11.6782 12.9058 12.3448 12.9058C12.9885 12.9058 13.5632 12.6973 14.069 12.2805C14.5517 11.8428 14.7931 11.3322 14.7931 10.7486C14.7931 10.165 14.5517 9.65435 14.069 9.21665C13.5632 8.7998 12.9885 8.59138 12.3448 8.59138C11.6782 8.59138 11.092 8.7998 10.5862 9.21665L6.27586 13.0621C5.5862 13.6874 4.72414 14 3.68966 14C2.65517 14 1.79311 13.6874 1.10345 13.0621C0.367812 12.3951 0 11.624 0 10.7486C0 9.85234 0.356318 9.08118 1.06897 8.43506C1.25874 8.263 1.46157 8.11462 1.67745 7.98991C1.47442 7.86946 1.28309 7.72781 1.10345 7.56494C0.367814 6.89798 0 6.12681 0 5.25143ZM5.6835 8.00072C5.89337 7.87797 6.09082 7.73271 6.27586 7.56494L10.5862 3.7195C11.092 3.30265 11.6782 3.09423 12.3448 3.09423C12.9885 3.09423 13.5632 3.30265 14.069 3.7195C14.5517 4.1572 14.7931 4.66783 14.7931 5.25143C14.7931 5.83502 14.5517 6.34565 14.069 6.78335C13.5632 7.2002 12.9885 7.40862 12.3448 7.40862C11.6782 7.40862 11.092 7.2002 10.5862 6.78335L9.51724 5.84544C9.47126 5.78291 9.41379 5.78291 9.34483 5.84544L8.65517 6.43945C8.58621 6.50198 8.58621 6.5645 8.65517 6.62703L9.72414 7.56494C9.90882 7.73238 10.1067 7.8774 10.3177 8C10.1067 8.1226 9.90882 8.26762 9.72414 8.43506L5.41379 12.2805C4.90804 12.6973 4.32184 12.9058 3.65517 12.9058C3.01149 12.9058 2.43678 12.6973 1.93103 12.2805C1.47126 11.8636 1.24138 11.353 1.24138 10.7486C1.24138 10.1441 1.47126 9.6335 1.93103 9.21665C2.43678 8.7998 3.01149 8.59138 3.65517 8.59138C4.32184 8.59138 4.90804 8.7998 5.41379 9.21665L6.48276 10.1546C6.52874 10.2171 6.58621 10.2171 6.65517 10.1546L7.34483 9.56055C7.41379 9.49802 7.41379 9.4355 7.34483 9.37297L6.27586 8.43506C6.09154 8.26795 5.89409 8.12317 5.6835 8.00072Z" fill="currentColor"></path></svg><div class="stat-text"><div>over</div><div class="number">3,215,599,290</div><div>modules served last 30d.</div></div><a href="https://cloudflare.com" target="_blank"><svg width="71" height="25" viewBox="0 0 71 25" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M59.9069 15.6527L60.0795 15.0514C60.2853 14.3362 60.2088 13.6749 59.8635 13.1891C59.5458 12.7417 59.0164 12.4781 58.3733 12.4475L46.1949 12.2923C46.1571 12.2916 46.12 12.2819 46.0867 12.264C46.0532 12.2462 46.0246 12.2207 46.0028 12.1896C45.9815 12.1574 45.9679 12.1207 45.9631 12.0824C45.9584 12.044 45.9626 12.005 45.9754 11.9686C45.9963 11.9085 46.0342 11.8559 46.0845 11.8173C46.1348 11.7787 46.1952 11.7557 46.2583 11.7512L58.5495 11.5944C60.0076 11.527 61.5862 10.3363 62.1388 8.88437L62.8398 7.04106C62.8685 6.96312 62.8751 6.87867 62.8588 6.79719C62.0629 3.19425 58.8679 0.5 55.0478 0.5C51.528 0.5 48.5395 2.78632 47.4675 5.96418C46.7431 5.41698 45.8399 5.16543 44.9391 5.2599C43.2505 5.42865 41.8928 6.7969 41.7257 8.4966C41.6828 8.92101 41.7142 9.34971 41.8185 9.76321C39.0601 9.84413 36.8479 12.1186 36.8479 14.9144C36.8483 15.164 36.8666 15.4132 36.9027 15.6602C36.9107 15.7172 36.9388 15.7694 36.9818 15.8074C37.0249 15.8453 37.0802 15.8664 37.1374 15.8667L59.6209 15.8696C59.623 15.8697 59.6251 15.8697 59.6272 15.8696C59.6909 15.8684 59.7524 15.8468 59.8027 15.8077C59.8531 15.7686 59.8896 15.7143 59.9069 15.6527Z" fill="#F6821F"></path><path d="M63.964 7.17474C63.8511 7.17474 63.7387 7.1776 63.6267 7.1833C63.6086 7.1846 63.5909 7.18852 63.574 7.19491C63.5447 7.20501 63.5181 7.22212 63.4968 7.24477C63.4754 7.26742 63.4598 7.29496 63.4513 7.325L62.9725 8.9896C62.7666 9.70494 62.8431 10.3656 63.1887 10.8514C63.5063 11.2994 64.0357 11.5623 64.6786 11.593L67.2748 11.7499C67.3113 11.7511 67.347 11.7608 67.3792 11.7784C67.4112 11.7959 67.4388 11.8208 67.4597 11.851C67.4813 11.8833 67.4951 11.9202 67.4997 11.9588C67.5046 11.9975 67.5002 12.0367 67.4872 12.0733C67.4663 12.1332 67.4284 12.1858 67.3782 12.2244C67.3281 12.263 67.2678 12.286 67.2049 12.2907L64.5073 12.4475C63.0427 12.5155 61.4644 13.7056 60.9123 15.1575L60.7174 15.6701C60.7093 15.6915 60.7063 15.7146 60.7087 15.7374C60.7112 15.7602 60.7189 15.7822 60.7315 15.8014C60.744 15.8205 60.7608 15.8365 60.7807 15.8478C60.8005 15.8591 60.8228 15.8656 60.8456 15.8665C60.848 15.8665 60.8503 15.8665 60.8527 15.8665H70.1347C70.1887 15.867 70.2413 15.8497 70.2846 15.8172C70.3278 15.7847 70.3594 15.7389 70.3743 15.6867C70.5388 15.0961 70.6219 14.4857 70.6213 13.8724C70.6202 10.1736 67.64 7.17474 63.964 7.17474Z" fill="#FBAD41"></path><path d="M7.86023 18.6348H9.44373V22.9883H12.2109V24.3846H7.86023V18.6348Z" fill="#CCCCCC"></path><path d="M13.8507 21.5262V21.5099C13.8507 19.8589 15.173 18.5196 16.936 18.5196C18.699 18.5196 20.0047 19.8423 20.0047 21.4934V21.5099C20.0047 23.161 18.6822 24.4994 16.9198 24.4994C15.1573 24.4994 13.8507 23.1773 13.8507 21.5262ZM18.3885 21.5262V21.5099C18.3885 20.6814 17.793 19.9571 16.9198 19.9571C16.0545 19.9571 15.4749 20.6637 15.4749 21.4934V21.5099C15.4749 22.3386 16.0707 23.0625 16.936 23.0625C17.8092 23.0625 18.3885 22.356 18.3885 21.5262Z" fill="#CCCCCC"></path><path d="M21.9431 21.8629V18.6345H23.5511V21.8303C23.5511 22.6588 23.9674 23.0541 24.6038 23.0541C25.2403 23.0541 25.6565 22.6763 25.6565 21.8712V18.6345H27.2647V21.821C27.2647 23.6775 26.212 24.4903 24.5876 24.4903C22.9632 24.4903 21.9431 23.6618 21.9431 21.8621" fill="#CCCCCC"></path><path d="M29.688 18.635H31.8917C33.9324 18.635 35.1158 19.8177 35.1158 21.4768V21.4936C35.1158 23.1525 33.916 24.3848 31.8593 24.3848H29.688V18.635ZM31.9165 22.9713C32.8635 22.9713 33.4914 22.4465 33.4914 21.5171V21.5008C33.4914 20.5811 32.8635 20.047 31.9165 20.047H31.2715V22.9718L31.9165 22.9713Z" fill="#CCCCCC"></path><path d="M37.4167 18.6348H41.9873V20.0315H39.0003V21.0086H41.7018V22.331H39.0003V24.3846H37.4167V18.6348Z" fill="#CCCCCC"></path><path d="M44.1908 18.6348H45.7742V22.9883H48.5414V24.3846H44.1908V18.6348Z" fill="#CCCCCC"></path><path d="M52.6794 18.5936H54.2052L56.6378 24.3846H54.9402L54.5236 23.3577H52.3196L51.9118 24.3846H50.2468L52.6794 18.5936ZM54.0667 22.1176L53.43 20.4828L52.7851 22.1176H54.0667Z" fill="#CCCCCC"></path><path d="M58.6772 18.6345H61.3788C62.2526 18.6345 62.8561 18.8648 63.2397 19.259C63.5749 19.5877 63.746 20.0323 63.746 20.5983V20.6145C63.746 21.4931 63.2795 22.0765 62.5706 22.3802L63.9338 24.3848H62.1049L60.9542 22.6431H60.2607V24.3848H58.6772V18.6345ZM61.3055 21.3948C61.8442 21.3948 62.1546 21.1318 62.1546 20.7128V20.6965C62.1546 20.2446 61.828 20.0149 61.297 20.0149H60.2607V21.3958L61.3055 21.3948Z" fill="#CCCCCC"></path><path d="M66.0308 18.6348H70.6257V19.9904H67.5981V20.8606H70.3406V22.1176H67.5981V23.0295H70.6666V24.3846H66.0308V18.6348Z" fill="#CCCCCC"></path><path d="M4.39319 22.2001C4.17145 22.7047 3.70489 23.0621 3.08494 23.0621C2.21937 23.0621 1.62384 22.3393 1.62384 21.5097V21.4931C1.62384 20.6645 2.20318 19.9569 3.06848 19.9569C3.72081 19.9569 4.21755 20.3607 4.42722 20.91H6.09634C5.82904 19.5415 4.63414 18.5198 3.08494 18.5198C1.32169 18.5198 0 19.8599 0 21.5097V21.526C0 23.177 1.3055 24.5 3.06848 24.5C4.57651 24.5 5.75521 23.5173 6.06616 22.2003L4.39319 22.2001Z" fill="#CCCCCC"></path></svg></a></div></div><div class="blabla"><h3>Create modern(es2015+) web apps easily with NPM packages in browser/deno.</h3><h4>No build tools needed!</h4><pre><code>import </code><code class="import-name">confetti </code><code>from </code><code>&quot;</code><code class="import-url">https://esm.sh/canvas-confetti@1.6.0</code><code>&quot;</code></pre><div class="run"><button><strong>Import &amp; Run</strong></button></div></div></div></section><section class="doc-page" id="docs"><div class="wrapper"><h2><strong>How to Use</strong></h2><div class="markdown-body"><p>esm.sh allows you to import <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules">JavaScript modules</a> from http URLs, <strong>no installation/build steps needed.</strong></p>
<pre><code class="hljs language-js"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> mod <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;https://esm.sh/PKG[@SEMVER][/PATH]&quot;</span>;
</code></pre>
<p>With <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script/type/importmap">import maps</a>, you can even use bare import specifiers instead of URLs:</p>
<pre><code class="hljs language-html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;importmap&quot;</span>&gt;</span><span class="javascript">
  {
    <span class="hljs-string">&quot;imports&quot;</span>: {
      <span class="hljs-string">&quot;react&quot;</span>: <span class="hljs-string">&quot;https://esm.sh/react@19.1.0&quot;</span>,
      <span class="hljs-string">&quot;react-dom/&quot;</span>: <span class="hljs-string">&quot;https://esm.sh/react-dom@19.1.0/&quot;</span>
    }
  }
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;module&quot;</span>&gt;</span><span class="javascript">
  <span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>; <span class="hljs-comment">// → https://esm.sh/react@19.1.0</span>
  <span class="hljs-keyword">import</span> { render } <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-dom/client&quot;</span>; <span class="hljs-comment">// → https://esm.sh/react-dom@19.1.0/client</span>
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
</code></pre>
<blockquote>
<p>More usages about import maps can be found in the <a href="#using-import-maps"><strong>Using Import Maps</strong></a> section.</p>
</blockquote>
<h3 id="supported-registries">Supported Registries</h3>
<ul>
<li><strong><a href="https://npmjs.com">NPM</a></strong>:<!-- -->
<pre><code class="hljs language-js"><span class="hljs-comment">// Examples</span>
<span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;https://esm.sh/react&quot;</span>; <span class="hljs-comment">// latest</span>
<span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;https://esm.sh/react@18&quot;</span>; <span class="hljs-comment">// 18.2.0</span>
<span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;https://esm.sh/react@next&quot;</span>; <span class="hljs-comment">// next tag</span>
<span class="hljs-keyword">import</span> { renderToString } <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;https://esm.sh/react-dom/server&quot;</span>; <span class="hljs-comment">// sub-modules</span>
</code></pre>
</li>
<li><strong><a href="https://jsr.io">JSR</a></strong> (starts with <code>/jsr/</code>):<!-- -->
<pre><code class="hljs language-js"><span class="hljs-comment">// Examples</span>
<span class="hljs-keyword">import</span> { encodeBase64 } <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;https://esm.sh/jsr/@std/encoding@1.0.0/base64&quot;</span>;
<span class="hljs-keyword">import</span> { <span class="hljs-title class_">Hono</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;https://esm.sh/jsr/@hono/hono@4&quot;</span>;
</code></pre>
</li>
<li><strong><a href="https://github.com">GitHub</a></strong> (starts with <code>/gh/</code>):<!-- -->
<pre><code class="hljs language-js"><span class="hljs-comment">// Examples</span>
<span class="hljs-keyword">import</span> tslib <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;https://esm.sh/gh/microsoft/tslib&quot;</span>; <span class="hljs-comment">// latest</span>
<span class="hljs-keyword">import</span> tslib <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;https://esm.sh/gh/microsoft/tslib@d72d6f7&quot;</span>; <span class="hljs-comment">// with commit hash</span>
<span class="hljs-keyword">import</span> tslib <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;https://esm.sh/gh/microsoft/tslib@v2.8.0&quot;</span>; <span class="hljs-comment">// with tag</span>
</code></pre>
</li>
<li><strong><a href="https://pkg.pr.new">pkg.pr.new</a></strong> (starts with <code>/pr/</code> or <code>/pkg.pr.new/</code>):<!-- -->
<pre><code class="hljs language-js"><span class="hljs-comment">// Examples</span>
<span class="hljs-keyword">import</span> { <span class="hljs-title class_">Bench</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;https://esm.sh/pr/tinylibs/tinybench/tinybench@a832a55&quot;</span>;
<span class="hljs-keyword">import</span> { <span class="hljs-title class_">Bench</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;https://esm.sh/pr/tinybench@a832a55&quot;</span>; <span class="hljs-comment">// --compact</span>
</code></pre>
</li>
</ul>
<h3 id="transforming-tsxvuesvelte-on-the-fly">Transforming <code>.ts(x)|.vue|.svelte</code> on the Fly</h3>
<p>esm.sh allows you to import <code>.ts(x)</code>, <code>.vue</code>, and <code>.svelte</code> files directly in the browser without any build steps.</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">import</span> { <span class="hljs-title class_">Airplay</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;https://esm.sh/gh/phosphor-icons/react@v2.1.5/src/csr/Airplay.tsx?deps=react@19.1.0&quot;</span>;
<span class="hljs-keyword">import</span> <span class="hljs-title class_">IconAirplay</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;https://esm.sh/gh/phosphor-icons/vue@v2.2.0/src/icons/PhAirplay.vue?deps=vue@3.5.8&quot;</span>;
</code></pre>
<h3 id="specifying-dependencies">Specifying Dependencies</h3>
<p>By default, esm.sh rewrites import specifiers based on the package dependencies. To specify the version of these
dependencies, you can add <code>?deps=PACKAGE@VERSION</code> to the import URL. To specify multiple dependencies, separate them with commas, like this: <code>?deps=react@18.2.0,react-dom@18.2.0</code>.</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;https://esm.sh/react@18.2.0&quot;</span>;
<span class="hljs-keyword">import</span> useSWR <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;https://esm.sh/swr?deps=react@18.2.0&quot;</span>;
</code></pre>
<h3 id="aliasing-dependencies">Aliasing Dependencies</h3>
<p>You can also alias dependencies by adding <code>?alias=PACKAGE:ALIAS</code> to the import URL. This is useful when you want to use a different package for a dependency.</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">import</span> useSWR <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;https://esm.sh/swr?alias=react:preact/compat&quot;</span>;
</code></pre>
<p>in combination with <code>?deps</code>:</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">import</span> useSWR <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;https://esm.sh/swr?alias=react:preact/compat&amp;deps=preact@10.10.0&quot;</span>;
</code></pre>
<h3 id="bundling-strategy">Bundling Strategy</h3>
<p>By default, esm.sh bundles sub-modules of a package that are not shared by entry modules defined in the <code>exports</code> field of <code>package.json</code>.</p>
<p>Bundling sub-modules can reduce the number of network requests, improving performance. However, it may result in repeated bundling of shared modules. In extreme cases, this can break package side effects or alter the <code>import.meta.url</code> semantics. To prevent this, you can disable the default bundling behavior by adding <code>?bundle=false</code>:</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;https://esm.sh/svelte?bundle=false&quot;</span>;
</code></pre>
<p>For package authors, it is recommended to define the <code>exports</code> field in <code>package.json</code>. This specifies the entry modules of the package, allowing esm.sh to accurately analyze the dependency tree and bundle the modules without duplication.</p>
<pre><code class="hljs language-json"><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;foo&quot;</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">&quot;exports&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
    <span class="hljs-attr">&quot;.&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
      <span class="hljs-attr">&quot;import&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;./index.mjs&quot;</span><span class="hljs-punctuation">,</span>
      <span class="hljs-attr">&quot;types&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;./index.d.ts&quot;</span>
    <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">&quot;./submodule&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
      <span class="hljs-attr">&quot;import&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;./submodule.mjs&quot;</span><span class="hljs-punctuation">,</span>
      <span class="hljs-attr">&quot;types&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;./submodule.d.ts&quot;</span>
    <span class="hljs-punctuation">}</span>
  <span class="hljs-punctuation">}</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<p>Or you can override the bundling strategy by adding the <code>esm.sh</code> field to your <code>package.json</code>:</p>
<pre><code class="hljs language-json"><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;foo&quot;</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">&quot;esm.sh&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
    <span class="hljs-attr">&quot;bundle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span> <span class="hljs-comment">// disables the default bundling behavior</span>
  <span class="hljs-punctuation">}</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<p>You can also add the <code>?standalone</code> flag to bundle the module along with all its external dependencies (excluding those in <code>peerDependencies</code>) into a single JavaScript file.</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">import</span> { <span class="hljs-title class_">Button</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;https://esm.sh/antd?standalone&quot;</span>;
</code></pre>
<h3 id="tree-shaking">Tree Shaking</h3>
<p>By default, esm.sh exports a module with all its exported members. However, if you want to import only a specific set of
members, you can specify them by adding a <code>?exports=foo,bar</code> query to the import statement.</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">import</span> { __await, __rest } <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;https://esm.sh/tslib&quot;</span>; <span class="hljs-comment">// 7.3KB</span>
<span class="hljs-keyword">import</span> { __await, __rest } <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;https://esm.sh/tslib?exports=__await,__rest&quot;</span>; <span class="hljs-comment">// 489B</span>
</code></pre>
<p>By using this feature, you can take advantage of tree shaking with esbuild and achieve a smaller bundle size. <strong>Note,
this feature doesn&#x27;t work with CommonJS modules.</strong></p>
<h3 id="development-build">Development Build</h3>
<pre><code class="hljs language-js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;https://esm.sh/react?dev&quot;</span>;
</code></pre>
<p>With the <code>?dev</code> query, esm.sh builds a module with <code>process.env.NODE_ENV</code> set to <code>&quot;development&quot;</code> or based on the
condition <code>development</code> in the <code>exports</code> field. This is useful for libraries that have different behavior in development
and production. For example, React uses a different warning message in development mode.</p>
<h3 id="esbuild-options">ESBuild Options</h3>
<p>By default, esm.sh checks the <code>User-Agent</code> header to determine the build target. You can also specify the <code>target</code> by
adding <code>?target</code>, available targets are: <strong>es2015</strong> - <strong>es2024</strong>, <strong>esnext</strong>, <strong>deno</strong>, <strong>denonext</strong>, and <strong>node</strong>.</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;https://esm.sh/react?target=es2022&quot;</span>;
</code></pre>
<p>Other supported options of esbuild:</p>
<ul>
<li><a href="https://esbuild.github.io/api/#conditions">Conditions</a>
<pre><code class="hljs language-js"><span class="hljs-keyword">import</span> foo <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;https://esm.sh/foo?conditions=custom1,custom2&quot;</span>;
</code></pre>
</li>
<li><a href="https://esbuild.github.io/api/#keep-names">Keep names</a>
<pre><code class="hljs language-js"><span class="hljs-keyword">import</span> foo <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;https://esm.sh/foo?keep-names&quot;</span>;
</code></pre>
</li>
<li><a href="https://esbuild.github.io/api/#ignore-annotations">Ignore annotations</a>
<pre><code class="hljs language-js"><span class="hljs-keyword">import</span> foo <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;https://esm.sh/foo?ignore-annotations&quot;</span>;
</code></pre>
</li>
</ul>
<h3 id="css-in-js">CSS-In-JS</h3>
<p>esm.sh supports importing CSS files in JS directly:</p>
<pre><code class="hljs language-html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://esm.sh/monaco-editor?css&quot;</span>&gt;</span>
</code></pre>
<blockquote>
<p>This only works when the package <strong>imports CSS files in JS</strong> directly.</p>
</blockquote>
<h3 id="web-worker">Web Worker</h3>
<p>esm.sh supports <code>?worker</code> query to load the module as a web worker:</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">import</span> createWorker <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;https://esm.sh/monaco-editor/esm/vs/editor/editor.worker?worker&quot;</span>;

<span class="hljs-comment">// create a worker</span>
<span class="hljs-keyword">const</span> worker = <span class="hljs-title function_">createWorker</span>();
<span class="hljs-comment">// rename the worker by adding the `name` option for debugging</span>
<span class="hljs-keyword">const</span> worker = <span class="hljs-title function_">createWorker</span>({ <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;editor.worker&quot;</span> });
<span class="hljs-comment">// inject code into the worker</span>
<span class="hljs-keyword">const</span> worker = <span class="hljs-title function_">createWorker</span>({ <span class="hljs-attr">inject</span>: <span class="hljs-string">&quot;self.onmessage = (e) =&gt; self.postMessage(e.data)&quot;</span> });
</code></pre>
<p>You can import any module as a worker from esm.sh with the <code>?worker</code> query. Plus, you can access the module&#x27;s exports in the
<code>inject</code> code. For example, use the <code>xxhash-wasm</code> to hash strings in a worker:</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">import</span> createWorker <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;https://esm.sh/xxhash-wasm@1.0.2?worker&quot;</span>;

<span class="hljs-comment">// variable &#x27;$module&#x27; is the imported &#x27;xxhash-wasm&#x27; module</span>
<span class="hljs-keyword">const</span> inject = <span class="hljs-string">`
const { default: xxhash } = $module
self.onmessage = async (e) =&gt; {
  const hasher = await xxhash()
  self.postMessage(hasher.h64ToString(e.data))
}
`</span>;
<span class="hljs-keyword">const</span> worker = <span class="hljs-title function_">createWorker</span>({ inject });
worker.<span class="hljs-property">onmessage</span> = <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;hash is&quot;</span>, e.<span class="hljs-property">data</span>);
worker.<span class="hljs-title function_">postMessage</span>(<span class="hljs-string">&quot;The string that is being hashed&quot;</span>);
</code></pre>
<blockquote>
<p>The <code>inject</code> parameter must be a valid JavaScript code, and it will be executed in the worker context.</p>
</blockquote>
<h3 id="deno-compatibility">Deno Compatibility</h3>
<p>esm.sh is a <strong>Deno-friendly</strong> CDN that resolves Node&#x27;s built-in modules (such as <strong>fs</strong>, <strong>os</strong>, <strong>net</strong>, etc.), making
it compatible with Deno.</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">import</span> express <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;https://esm.sh/express&quot;</span>;

<span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>();
app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> {
  res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;Hello World&quot;</span>);
});
app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>);
</code></pre>
<p>Deno supports type definitions for modules with a <code>types</code> field in their <code>package.json</code> file through the
<code>X-TypeScript-Types</code> header. This makes it possible to have type checking and auto-completion when using those modules
in Deno. (<a href="https://deno.land/manual/typescript/types#using-x-typescript-types-header">link</a>).</p>
<p><img src="https://esm.sh/gh/esm-dev/esm.sh@e7447dea04/server/embed/assets/sceenshot-deno-types.png" alt="Figure #1"/></p>
<p>In case the type definitions provided by the <code>X-TypeScript-Types</code> header is incorrect, you can disable it by adding the
<code>?no-dts</code> query to the module import URL:</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">import</span> <span class="hljs-built_in">unescape</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;https://esm.sh/lodash/unescape?no-dts&quot;</span>;
</code></pre>
<p>This will prevent the <code>X-TypeScript-Types</code> header from being included in the network request, and you can manually
specify the types for the imported module.</p></div></div></section><section class="doc-page" id="using-import-maps"><div class="wrapper"><h2><strong>Using Import Maps</strong></h2><div class="markdown-body"><p><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script/type/importmap"><strong>Import Maps</strong></a> has been supported by most modern browsers and Deno natively.
This allows <em><strong>bare import specifiers</strong></em>, such as <code>import React from &quot;react&quot;</code>, to work.</p>
<p>esm.sh introduces the <code>?external</code> for specifying external dependencies. By employing this query, esm.sh maintains the import specifier intact, leaving it to the browser/Deno to resolve based on the import map. For example:</p>
<pre><code class="hljs language-html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;importmap&quot;</span>&gt;</span><span class="javascript">
{
  <span class="hljs-string">&quot;imports&quot;</span>: {
    <span class="hljs-string">&quot;preact&quot;</span>: <span class="hljs-string">&quot;https://esm.sh/preact@10.10.0&quot;</span>,
    <span class="hljs-string">&quot;preact/&quot;</span>: <span class="hljs-string">&quot;https://esm.sh/preact@10.10.0/&quot;</span>,
    <span class="hljs-string">&quot;preact-render-to-string&quot;</span>: <span class="hljs-string">&quot;https://esm.sh/preact-render-to-string@6.5.0?external=preact&quot;</span>
  }
}
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;module&quot;</span>&gt;</span><span class="javascript">
  <span class="hljs-keyword">import</span> { h } <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;preact&quot;</span>;
  <span class="hljs-keyword">import</span> { useState } <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;preact/hooks&quot;</span>;
  <span class="hljs-keyword">import</span> { render } <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;preact-render-to-string&quot;</span>;
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
</code></pre>
<p>Alternatively, you can <strong>mark all dependencies as external</strong> by adding a <code>*</code> prefix before the package name:</p>
<pre><code class="hljs language-json"><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">&quot;imports&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
    <span class="hljs-attr">&quot;preact&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://esm.sh/preact@10.10.0&quot;</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">&quot;preact-render-to-string&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://esm.sh/*preact-render-to-string@6.5.0&quot;</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">&quot;react&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://esm.sh/preact@10.10.0/compat&quot;</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">&quot;swr&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://esm.sh/*swr@1.3.0&quot;</span> <span class="hljs-comment">// preact/compat is imported instead of react</span>
  <span class="hljs-punctuation">}</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<p>Import maps supports <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script/type/importmap#packages-via-trailing-slashes"><strong>trailing slash</strong></a> that can
not work with URL search params friendly. To fix this issue, esm.sh provides a special format for import URL that allows
you to use query params with trailing slash: change the query prefix <code>?</code> to <code>&amp;</code> and put it after the package version.</p>
<pre><code class="hljs language-json"><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">&quot;imports&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
    <span class="hljs-attr">&quot;react-dom&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://esm.sh/react-dom@19.1.0?dev&quot;</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">&quot;react-dom/&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://esm.sh/react-dom@19.1.0&amp;dev/&quot;</span>
  <span class="hljs-punctuation">}</span>
<span class="hljs-punctuation">}</span>
</code></pre></div></div></section><section class="doc-page" id="tsx"><div class="wrapper"><h2><strong>Using <code>esm.sh/tsx</code></strong></h2><div class="markdown-body"><p><code>esm.sh/tsx</code> is a lightweight <strong>1KB</strong> script that allows you to write <code>TSX</code> directly in HTML without any build steps. Your source code is sent to the server, compiled, cached at the edge, and served to the browser as a JavaScript module.</p>
<p><code>esm.sh/tsx</code> supports <code>&lt;script&gt;</code> tags with <code>type</code> set to <code>text/babel</code>, <code>text/jsx</code>, <code>text/ts</code>, or <code>text/tsx</code>.</p>
<p>In development mode (open the page on localhost), <code>esm.sh/tsx</code> uses <a href="https://github.com/esm-dev/tsx">@esm.sh/tsx</a> to transform JSX syntax into JavaScript.</p>
<pre><code class="hljs language-html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;importmap&quot;</span>&gt;</span><span class="javascript">
    {
      <span class="hljs-string">&quot;imports&quot;</span>: {
        <span class="hljs-string">&quot;react&quot;</span>: <span class="hljs-string">&quot;https://esm.sh/react@19.1.0&quot;</span>,
        <span class="hljs-string">&quot;react-dom/client&quot;</span>: <span class="hljs-string">&quot;https://esm.sh/react-dom@19.1.0/client&quot;</span>
      }
    }
  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;module&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://esm.sh/tsx&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><span class="javascript">
    <span class="hljs-keyword">import</span> { createRoot } <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-dom/client&quot;</span>
    <span class="hljs-title function_">createRoot</span>(root).<span class="hljs-title function_">render</span>(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello, World!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>)
  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span>
</code></pre>
<blockquote>
<p>By default, esm.sh transforms your JSX syntax with <code>jsxImportSource</code> set to <code>react</code> or <code>preact</code> which is specified in the <code>importmap</code>. To use a custom JSX runtime, add <code>@jsxRuntime</code> specifier in the <code>importmap</code> script. For example, <a href="https://esm.sh/solid-js/jsx-runtime">solid-js</a>.</p>
</blockquote></div></div></section><section class="doc-page" id="faq"><div class="wrapper"><h2><strong>FAQs</strong></h2><div class="markdown-body"><p><strong>Which browsers are supported?</strong></p>
<p>esm.sh supports all modern browsers which support <a href="https://caniuse.com/es6-module">ES6 Module</a>. Including <a href="https://deno.land">Deno</a>.</p>
<p><strong>Does esm.sh support private npm packages?</strong></p>
<p>Nope, but you can deploy your own esm.sh server to support private npm packages. Check our <a href="https://github.com/esm-dev/esm.sh/blob/main/HOSTING.md">self hosting guide</a>.</p>
<p><strong>Why I get <code>timeout</code> error?</strong></p>
<p>When first time you import a module, esm.sh needs to build the module then cache it. If the module is too large, it may take a long time to build. You can try again later, since it&#x27;s queued and will be built soon.</p>
<p><strong>Does esm.sh support Subresource Integrity (SRI)?</strong></p>
<p>Browsers don&#x27;t yet support SRI for ES6 Module. Deno (1.18+) supports hash check by generating the <code>deno.lock</code> file.</p>
<p><strong>How can I report a bug?</strong></p>
<p>Please open an issue on <a href="https://github.com/esm-dev/esm.sh/issues/new/choose">GitHub</a>. Thanks :)</p></div></div></section><footer><div class="wrapper"><p><span class="line"></span></p><p>esm.sh is an <em>open source</em> project on <a href="https://github.com/esm-dev/esm.sh" target="_blank">GitHub</a> maintained by <a href="https://github.com/ije" target="_blank">@ije</a>. Under MIT License.</p><p>The CDN is powered by <a href="https://cloudflare.com" target="_blank">Cloudflare</a>.</p><p style="font-size:20px"><svg width="16" height="16" viewBox="0 0 16 16" class="icon" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M0 5.25143C0 4.3552 0.356318 3.58403 1.06897 2.93791C1.75863 2.31263 2.62069 2 3.65517 2C4.71265 2 5.5862 2.31263 6.27586 2.93791L7.34483 3.87582C7.41379 3.93835 7.41379 4.00088 7.34483 4.06341L6.65517 4.65742C6.58621 4.71994 6.52874 4.71994 6.48276 4.65742L5.41379 3.7195C4.90804 3.30265 4.32184 3.09423 3.65517 3.09423C3.01149 3.09423 2.43678 3.30265 1.93104 3.7195C1.47126 4.13636 1.24138 4.64699 1.24138 5.25143C1.24138 5.85586 1.47126 6.3665 1.93104 6.78335C2.43678 7.2002 3.01149 7.40862 3.65517 7.40862C4.32184 7.40862 4.90804 7.2002 5.41379 6.78335L9.72414 2.93791C10.4138 2.31263 11.2874 2 12.3448 2C13.3793 2 14.2414 2.31263 14.931 2.93791C15.6437 3.58403 16 4.3552 16 5.25143C16 6.14766 15.6437 6.91882 14.931 7.56494C14.7464 7.73238 14.5493 7.8774 14.3399 8C14.5493 8.1226 14.7464 8.26762 14.931 8.43506C15.6437 9.08118 16 9.85234 16 10.7486C16 11.6448 15.6437 12.416 14.931 13.0621C14.2414 13.6874 13.3793 14 12.3448 14C11.2874 14 10.4138 13.6874 9.72414 13.0621L8.65517 12.1242C8.58621 12.0616 8.58621 11.9991 8.65517 11.9366L9.34483 11.3426C9.41379 11.2801 9.47126 11.2801 9.51724 11.3426L10.5862 12.2805C11.092 12.6973 11.6782 12.9058 12.3448 12.9058C12.9885 12.9058 13.5632 12.6973 14.069 12.2805C14.5517 11.8428 14.7931 11.3322 14.7931 10.7486C14.7931 10.165 14.5517 9.65435 14.069 9.21665C13.5632 8.7998 12.9885 8.59138 12.3448 8.59138C11.6782 8.59138 11.092 8.7998 10.5862 9.21665L6.27586 13.0621C5.5862 13.6874 4.72414 14 3.68966 14C2.65517 14 1.79311 13.6874 1.10345 13.0621C0.367812 12.3951 0 11.624 0 10.7486C0 9.85234 0.356318 9.08118 1.06897 8.43506C1.25874 8.263 1.46157 8.11462 1.67745 7.98991C1.47442 7.86946 1.28309 7.72781 1.10345 7.56494C0.367814 6.89798 0 6.12681 0 5.25143ZM5.6835 8.00072C5.89337 7.87797 6.09082 7.73271 6.27586 7.56494L10.5862 3.7195C11.092 3.30265 11.6782 3.09423 12.3448 3.09423C12.9885 3.09423 13.5632 3.30265 14.069 3.7195C14.5517 4.1572 14.7931 4.66783 14.7931 5.25143C14.7931 5.83502 14.5517 6.34565 14.069 6.78335C13.5632 7.2002 12.9885 7.40862 12.3448 7.40862C11.6782 7.40862 11.092 7.2002 10.5862 6.78335L9.51724 5.84544C9.47126 5.78291 9.41379 5.78291 9.34483 5.84544L8.65517 6.43945C8.58621 6.50198 8.58621 6.5645 8.65517 6.62703L9.72414 7.56494C9.90882 7.73238 10.1067 7.8774 10.3177 8C10.1067 8.1226 9.90882 8.26762 9.72414 8.43506L5.41379 12.2805C4.90804 12.6973 4.32184 12.9058 3.65517 12.9058C3.01149 12.9058 2.43678 12.6973 1.93103 12.2805C1.47126 11.8636 1.24138 11.353 1.24138 10.7486C1.24138 10.1441 1.47126 9.6335 1.93103 9.21665C2.43678 8.7998 3.01149 8.59138 3.65517 8.59138C4.32184 8.59138 4.90804 8.7998 5.41379 9.21665L6.48276 10.1546C6.52874 10.2171 6.58621 10.2171 6.65517 10.1546L7.34483 9.56055C7.41379 9.49802 7.41379 9.4355 7.34483 9.37297L6.27586 8.43506C6.09154 8.26795 5.89409 8.12317 5.6835 8.00072Z" fill="currentColor"></path></svg></p></div></footer>
  </div>
<script src="/main.js?v=48"></script>
<!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-E5EBRQRHBT"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-E5EBRQRHBT');
</script>
</body>

</html>
